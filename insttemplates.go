package main

var templates = map[string]func() Instruction{
	"ADD": func() Instruction { return newAdd(1) },
	"SUB": func() Instruction { return newAdd(2) },
	// "MUL"
	// "DIV"

	"LDA":  func() Instruction { return newLD(8, A) },
	"LD1":  func() Instruction { return newLD(9, I1) },
	"LD2":  func() Instruction { return newLD(10, I2) },
	"LD3":  func() Instruction { return newLD(11, I3) },
	"LD4":  func() Instruction { return newLD(12, I4) },
	"LD5":  func() Instruction { return newLD(13, I5) },
	"LD6":  func() Instruction { return newLD(14, I6) },
	"LDX":  func() Instruction { return newLD(15, X) },
	"LDAN": func() Instruction { return newLD(16, A) },
	"LD1N": func() Instruction { return newLD(17, I1) },
	"LD2N": func() Instruction { return newLD(18, I2) },
	"LD3N": func() Instruction { return newLD(19, I3) },
	"LD4N": func() Instruction { return newLD(20, I4) },
	"LD5N": func() Instruction { return newLD(21, I5) },
	"LD6N": func() Instruction { return newLD(22, I6) },
	"LDXN": func() Instruction { return newLD(23, X) },

	"STA": func() Instruction { return newST(24, A) },
	"ST1": func() Instruction { return newST(25, I1) },
	"ST2": func() Instruction { return newST(26, I2) },
	"ST3": func() Instruction { return newST(27, I3) },
	"ST4": func() Instruction { return newST(28, I4) },
	"ST5": func() Instruction { return newST(29, I5) },
	"ST6": func() Instruction { return newST(30, I6) },
	"STX": func() Instruction { return newST(31, X) },
	"STJ": func() Instruction { return newST(32, J) },
	"STZ": func() Instruction { return newST(33, A) },

	"JMP":  func() Instruction { return newJmp(0, 39, NoR) },
	"JSJ":  func() Instruction { return newJmp(1, 39, NoR) },
	"JOV":  func() Instruction { return newJmp(2, 39, NoR) },
	"JNOV": func() Instruction { return newJmp(3, 39, NoR) },
	"JL":   func() Instruction { return newJmp(4, 39, NoR) },
	"JE":   func() Instruction { return newJmp(5, 39, NoR) },
	"JG":   func() Instruction { return newJmp(6, 39, NoR) },
	"JGE":  func() Instruction { return newJmp(7, 39, NoR) },
	"JNE":  func() Instruction { return newJmp(8, 39, NoR) },
	"JLE":  func() Instruction { return newJmp(9, 39, NoR) },

	"JAN":  func() Instruction { return newJmp(0, 40, A) },
	"JAZ":  func() Instruction { return newJmp(1, 40, A) },
	"JAP":  func() Instruction { return newJmp(2, 40, A) },
	"JANN": func() Instruction { return newJmp(3, 40, A) },
	"JANZ": func() Instruction { return newJmp(4, 40, A) },
	"JANP": func() Instruction { return newJmp(5, 40, A) },

	"J1N":  func() Instruction { return newJmp(0, 41, I1) },
	"J1Z":  func() Instruction { return newJmp(1, 41, I1) },
	"J1P":  func() Instruction { return newJmp(2, 41, I1) },
	"J1NN": func() Instruction { return newJmp(3, 41, I1) },
	"J1NZ": func() Instruction { return newJmp(4, 41, I1) },
	"J1NP": func() Instruction { return newJmp(5, 41, I1) },

	"J2N":  func() Instruction { return newJmp(0, 42, I2) },
	"J2Z":  func() Instruction { return newJmp(1, 42, I2) },
	"J2P":  func() Instruction { return newJmp(2, 42, I2) },
	"J2NN": func() Instruction { return newJmp(3, 42, I2) },
	"J2NZ": func() Instruction { return newJmp(4, 42, I2) },
	"J2NP": func() Instruction { return newJmp(5, 42, I2) },

	"J3N":  func() Instruction { return newJmp(0, 43, I3) },
	"J3Z":  func() Instruction { return newJmp(1, 43, I3) },
	"J3P":  func() Instruction { return newJmp(2, 43, I3) },
	"J3NN": func() Instruction { return newJmp(3, 43, I3) },
	"J3NZ": func() Instruction { return newJmp(4, 43, I3) },
	"J3NP": func() Instruction { return newJmp(5, 43, I3) },

	"J4N":  func() Instruction { return newJmp(0, 44, I4) },
	"J4Z":  func() Instruction { return newJmp(1, 44, I4) },
	"J4P":  func() Instruction { return newJmp(2, 44, I4) },
	"J4NN": func() Instruction { return newJmp(3, 44, I4) },
	"J4NZ": func() Instruction { return newJmp(4, 44, I4) },
	"J4NP": func() Instruction { return newJmp(5, 44, I4) },

	"J5N":  func() Instruction { return newJmp(0, 45, I5) },
	"J5Z":  func() Instruction { return newJmp(1, 45, I5) },
	"J5P":  func() Instruction { return newJmp(2, 45, I5) },
	"J5NN": func() Instruction { return newJmp(3, 45, I5) },
	"J5NZ": func() Instruction { return newJmp(4, 45, I5) },
	"J5NP": func() Instruction { return newJmp(5, 45, I5) },

	"J6N":  func() Instruction { return newJmp(0, 46, I6) },
	"J6Z":  func() Instruction { return newJmp(1, 46, I6) },
	"J6P":  func() Instruction { return newJmp(2, 46, I6) },
	"J6NN": func() Instruction { return newJmp(3, 46, I6) },
	"J6NZ": func() Instruction { return newJmp(4, 46, I6) },
	"J6NP": func() Instruction { return newJmp(5, 46, I6) },

	"JXN":  func() Instruction { return newJmp(0, 47, X) },
	"JXZ":  func() Instruction { return newJmp(1, 47, X) },
	"JXP":  func() Instruction { return newJmp(2, 47, X) },
	"JXNN": func() Instruction { return newJmp(3, 47, X) },
	"JXNZ": func() Instruction { return newJmp(4, 47, X) },
	"JXNP": func() Instruction { return newJmp(5, 47, X) },

	"INCA": func() Instruction { return newAddressTransfer(0, 48, A) },
	"INC1": func() Instruction { return newAddressTransfer(0, 49, I1) },
	"INC2": func() Instruction { return newAddressTransfer(0, 50, I2) },
	"INC3": func() Instruction { return newAddressTransfer(0, 51, I3) },
	"INC4": func() Instruction { return newAddressTransfer(0, 52, I4) },
	"INC5": func() Instruction { return newAddressTransfer(0, 53, I5) },
	"INC6": func() Instruction { return newAddressTransfer(0, 54, I6) },
	"INCX": func() Instruction { return newAddressTransfer(0, 55, X) },

	"DECA": func() Instruction { return newAddressTransfer(1, 48, A) },
	"DEC1": func() Instruction { return newAddressTransfer(1, 49, I1) },
	"DEC2": func() Instruction { return newAddressTransfer(1, 50, I2) },
	"DEC3": func() Instruction { return newAddressTransfer(1, 51, I3) },
	"DEC4": func() Instruction { return newAddressTransfer(1, 52, I4) },
	"DEC5": func() Instruction { return newAddressTransfer(1, 53, I5) },
	"DEC6": func() Instruction { return newAddressTransfer(1, 54, I6) },
	"DECX": func() Instruction { return newAddressTransfer(1, 55, X) },

	"ENTA": func() Instruction { return newAddressTransfer(2, 48, A) },
	"ENT1": func() Instruction { return newAddressTransfer(2, 49, I1) },
	"ENT2": func() Instruction { return newAddressTransfer(2, 50, I2) },
	"ENT3": func() Instruction { return newAddressTransfer(2, 51, I3) },
	"ENT4": func() Instruction { return newAddressTransfer(2, 52, I4) },
	"ENT5": func() Instruction { return newAddressTransfer(2, 53, I5) },
	"ENT6": func() Instruction { return newAddressTransfer(2, 54, I6) },
	"ENTX": func() Instruction { return newAddressTransfer(2, 55, X) },

	"ENNA": func() Instruction { return newAddressTransfer(2, 48, A) },
	"ENN1": func() Instruction { return newAddressTransfer(2, 49, I1) },
	"ENN2": func() Instruction { return newAddressTransfer(2, 50, I2) },
	"ENN3": func() Instruction { return newAddressTransfer(2, 51, I3) },
	"ENN4": func() Instruction { return newAddressTransfer(2, 52, I4) },
	"ENN5": func() Instruction { return newAddressTransfer(2, 53, I5) },
	"ENN6": func() Instruction { return newAddressTransfer(2, 54, I6) },
	"ENNX": func() Instruction { return newAddressTransfer(2, 55, X) },
}
